// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "relationJoins"]
  //output          = "src/app/generated/prisma/client"
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgres"
  url          = env("PRISMA_DATABASE_URL")
  relationMode = "prisma"
}


model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified Boolean?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role             String? @default("user")
  locale           String?
  timezone         String?
  stripeCustomerId String? @unique

  twoFactorEnabled Boolean? @default(false)

  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  normalizedEmail String?

  sessions    Session[]
  accounts    Account[]
  twofactors  TwoFactor[]
  passkeys    Passkey[]
  apikeys     Apikey[]
  members     Member[]
  invitations Invitation[]

  @@unique([normalizedEmail])
  @@index([email])
  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?

  scope     String?
  idToken   String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@index([userId])
  @@map("session")
}

enum Role {
  user
  admin
  owner
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model TwoFactor {
  id     String @id
  userId String

  secret      String
  backupCodes String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("twoFactor")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("passkey")
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?  @default(true)
  rateLimitEnabled    Boolean?  @default(true)
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@index([userId])
  @@map("apikey")
}

model Organization {
  id        String   @id
  name      String
  slug      String
  logo      String?
  metadata  String?
  createdAt DateTime

  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String   @id
  userId         String
  organizationId String
  role           String
  createdAt      DateTime

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@map("member")
}

model Invitation {
  id             String   @id
  email          String
  inviterId      String
  organizationId String
  role           String?
  status         String
  expiresAt      DateTime

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([inviterId])
  @@index([organizationId])
  @@map("invitation")
}

model Subscription {
  id                   String    @id @default(cuid())
  plan                 String
  referenceId          String    @unique // The ID this subscription is associated with (user ID by default)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?  @default(false)
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
}

/// Next.js application logs for log drain functionality

model system_logs {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  level       String   @db.VarChar(10) // error, warn, info, debug
  message     String
  service     String   @db.VarChar(100) // service name (e.g., "web", "api")
  environment String   @db.VarChar(20) // production, development, staging
  version     String?  @db.VarChar(50) // app version
  requestId   String?  @db.VarChar(100) // request correlation ID
  userId      String?  @db.VarChar(100) // user ID if available
  sessionId   String?  @db.VarChar(100) // session ID if available
  ip          String?  @db.VarChar(45) // IPv4 or IPv6
  userAgent   String?  @db.VarChar(500)
  url         String?  @db.VarChar(1000) // request URL
  method      String?  @db.VarChar(10) // HTTP method
  statusCode  Int? // HTTP status code
  duration    Int? // request duration in ms
  errorCode   String?  @db.VarChar(100) // error code if applicable
  stackTrace  String?
  metadata    String?
  tags        String?
  source      String?  @db.VarChar(100) // source file/component
  line        Int? // line number
  column      Int? // column number
  createdAt   DateTime @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([service])
  @@index([environment])
  @@index([requestId])
  @@index([userId])
}

model PlatformSettings {
  id              String  @id @default(cuid())
  stripeProductId String?
  stripePriceId   String?
  settings        String?
}

model Country {
  name          String
  unCode        String  @unique @db.VarChar(3)
  allowBilling  Boolean @default(false)
  allowShipping Boolean @default(false)
  allowInStore  Boolean @default(false)
  alpha3        String  @id @unique @db.VarChar(3)

  @@index([name])
  @@index([alpha3])
}

model Currency {
  id           String  @id @unique
  name         String
  symbol       String?
  ISOdigits    Int?
  ISOnum       Int?
  decimals     Int?
  demonym      String
  majorPlural  String?
  majorSingle  String?
  minorPlural  String?
  minorSingle  String?
  numToBasic   Int?
  symbolNative String

  @@index([name])
  @@index([demonym])
  @@index([symbol])
  @@index([symbolNative])
}

model Locale {
  id                String @id @unique @db.VarChar(5)
  name              String
  lng               String //2 digit language code
  defaultCurrencyId String

  SystemMessage            SystemMessage[]
  MessageTemplateLocalized MessageTemplateLocalized[]

  @@index([id])
  @@index([name])
}


model SystemMessage {
  id        String   @id @default(uuid())
  localeId  String   @unique
  published Boolean  @default(false)
  message   String
  createdOn DateTime @default(now())

  Locale Locale @relation(fields: [localeId], references: [id])

  @@index([localeId])
  @@index([createdOn])
}


model MessageTemplate {
  id                       String                     @id @default(uuid())
  name                     String
  MessageTemplateLocalized MessageTemplateLocalized[]

  @@index([name])
}

model MessageTemplateLocalized {
  id                String          @id @default(uuid())
  messageTemplateId String
  localeId          String
  bCCEmailAddresses String?
  subject           String
  body              String
  isActive          Boolean         @default(true)
  Locale            Locale          @relation(fields: [localeId], references: [id], onDelete: Cascade)
  MessageTemplate   MessageTemplate @relation(fields: [messageTemplateId], references: [id], onDelete: Cascade)

  @@unique([localeId, messageTemplateId])
  @@index([localeId])
  @@index([messageTemplateId])
}

model EmailQueue {
  id          String    @id @default(uuid())
  from        String
  fromName    String    @default("")
  to          String
  toName      String    @default("")
  cc          String    @default("")
  bcc         String    @default("")
  subject     String
  textMessage String
  htmMessage  String
  createdOn   DateTime  @default(now())
  sendTries   Int       @default(0)
  sentOn      DateTime?

  @@index([sendTries])
  @@index([createdOn])
  @@index([from])
  @@index([to])
}
