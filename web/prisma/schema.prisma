// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "relationJoins"]
  //output          = "src/app/generated/prisma/client"
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgres"
  url          = env("PRISMA_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String       @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  normalizedEmail  String?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  locale           String?
  timezone         String?
  stripeCustomerId String?
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]
  passkeys         Passkey[]
  apikeys          Apikey[]
  members          Member[]
  invitations      Invitation[]

  @@unique([email])
  @@unique([normalizedEmail])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@map("apikey")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String // The ID this subscription is associated with (user ID by default)
  stripeCustomerId     String
  stripeSubscriptionId String
  status               String
  periodStart          DateTime
  periodEnd            DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
}

model PlatformSettings {
  id              String  @id
  stripeProductId String?
  settings        String?
}

model Country {
  name          String
  unCode        String  @unique @db.VarChar(3)
  allowBilling  Boolean @default(false)
  allowShipping Boolean @default(false)
  allowInStore  Boolean @default(false)
  alpha3        String  @id @unique @db.VarChar(3)

  @@index([name])
  @@index([alpha3])
}

model Currency {
  id           String  @id @unique
  name         String
  symbol       String?
  ISOdigits    Int?
  ISOnum       Int?
  decimals     Int?
  demonym      String
  majorPlural  String?
  majorSingle  String?
  minorPlural  String?
  minorSingle  String?
  numToBasic   Int?
  symbolNative String

  @@index([name])
  @@index([demonym])
  @@index([symbol])
  @@index([symbolNative])
}

model Locale {
  id                String @id @unique @db.VarChar(5)
  name              String
  lng               String //2 digit language code
  defaultCurrencyId String

  @@index([id])
  @@index([name])
}
