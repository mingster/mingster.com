---
description: Components Directory Guide - Use Local Components Only
globs: **/*.js,**/*.jsx,**/*.ts,**/*.tsx
alwaysApply: false
---

# Components Directory Guide

## Component Architecture

This project uses **local components** only. All components are self-contained within this project.

## Important: DO NOT Use mingster.backbone

**This project does NOT have `mingster.backbone` configured.**

- ❌ Do NOT import from `mingster.backbone`
- ✅ Always use local imports from `@/components/`

## Import Patterns

### ✅ Local Component Imports (Always Use These)

```tsx
// UI Components (shadcn/ui)
import { Button } from "@/components/ui/button";
import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select } from "@/components/ui/select";
import { Form, FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Table } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Utility Components
import { Loader } from "@/components/loader";
import Container from "@/components/ui/container";
import { Separator } from "@/components/ui/separator";

// Toast
import { Toaster } from "@/components/toaster";
import { toast } from "@/components/ui/use-toast";

// Project-Specific
import { GlobalNavbar } from "@/components/global-navbar";
import { Logo } from "@/components/logo";

// Utilities
import { cn } from "@/lib/utils";

// Hooks
import { useTheme } from "next-themes";
```

## Project Structure

```
src/
├── components/
│   ├── ui/                      # shadcn/ui components
│   │   ├── button.tsx
│   │   ├── dialog.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   ├── form.tsx
│   │   ├── table.tsx
│   │   ├── tabs.tsx
│   │   ├── badge.tsx
│   │   ├── separator.tsx
│   │   ├── container.tsx
│   │   ├── use-toast.tsx
│   │   └── ... (all shadcn/ui components)
│   ├── auth/                    # Authentication components
│   │   ├── sign-in-form.tsx
│   │   └── passkey-auth.tsx
│   ├── analytics/               # Analytics components
│   │   └── page-view-tracker.tsx
│   ├── editor/                  # Editor components
│   ├── loader.tsx               # Loading spinner
│   ├── toaster.tsx              # Toast notifications
│   ├── global-navbar.tsx        # Main navigation
│   ├── logo.tsx                 # Brand logo
│   ├── locale-select-items.tsx  # i18n components
│   └── ios-version-check.tsx    # iOS version checker
├── lib/
│   ├── utils.ts                 # Utility functions (includes cn)
│   ├── auth.ts                  # Auth configuration
│   ├── auth-client.ts           # Auth client
│   └── prismadb.ts              # Prisma client
└── hooks/
    └── ... (custom hooks)
```

## Component Categories

### 1. UI Components (shadcn/ui)

All UI components are in `src/components/ui/` and should be imported from there:

```tsx
import { Button } from "@/components/ui/button";
import { Dialog } from "@/components/ui/dialog";
import { Card } from "@/components/ui/card";
// ... etc.
```

### 2. Authentication Components

Authentication-related components in `src/components/auth/`:

```tsx
import { SignInForm } from "@/components/auth/sign-in-form";
import { PasskeyAuth } from "@/components/auth/passkey-auth";
```

### 3. Utility Components

Utility components at root of `src/components/`:

```tsx
import { Loader } from "@/components/loader";
import { GlobalNavbar } from "@/components/global-navbar";
import { IOSVersionCheck } from "@/components/ios-version-check";
```

### 4. Analytics Components

Analytics components in `src/components/analytics/`:

```tsx
import { PageViewTracker } from "@/components/analytics/page-view-tracker";
```

## Common Patterns

### Form with Validation

```tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { toast } from "@/components/ui/use-toast";

<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)}>
    <FormField
      control={form.control}
      name="email"
      render={({ field }) => (
        <FormItem>
          <FormLabel>Email</FormLabel>
          <FormControl>
            <Input {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
    <Button type="submit">Submit</Button>
  </form>
</Form>
```

### DataTable

Use `@tanstack/react-table` directly:

```tsx
import { DataTable } from "@/components/data-table";
import type { ColumnDef } from "@tanstack/react-table";

const columns: ColumnDef<DataType>[] = [
  {
    accessorKey: "name",
    header: "Name",
  },
  // ... more columns
];

<DataTable columns={columns} data={data} />
```

### Toast Notifications

```tsx
import { toast } from "@/components/ui/use-toast";
import { Toaster } from "@/components/toaster";

// In your root layout
<Toaster />

// Usage in components
toast({
  title: "Success",
  description: "Item saved successfully!",
});

toast({
  variant: "destructive",
  title: "Error",
  description: "Failed to save item",
});
```

### Dialog/Modal

```tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

<Dialog>
  <DialogTrigger asChild>
    <Button>Open Dialog</Button>
  </DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone.
      </DialogDescription>
    </DialogHeader>
    {/* Dialog content */}
  </DialogContent>
</Dialog>
```

## Best Practices

1. **Use local imports**: Always import from `@/components/`, `@/lib/`, etc.
2. **Don't try to use mingster.backbone**: It's not configured in this project
3. **Check src/components first**: Before creating a component, check if it exists locally
4. **Follow shadcn/ui patterns**: For new UI components, follow shadcn/ui conventions
5. **Keep components organized**: Place components in appropriate subdirectories

## Adding New Components

### Adding a New UI Component (from shadcn/ui)

Use the shadcn/ui CLI:

```bash
npx shadcn@latest add [component-name]
```

This will add the component to `src/components/ui/`.

### Creating Custom Components

1. **UI Components**: Add to `src/components/ui/`
2. **Feature Components**: Add to appropriate subdirectory (auth, analytics, etc.)
3. **Utility Components**: Add to root of `src/components/`

## Utilities

```tsx
// Class name utility
import { cn } from "@/lib/utils";

const className = cn("base-class", conditionalClass && "conditional", props.className);
```

## Hooks

```tsx
// Theme
import { useTheme } from "next-themes";
const { theme, setTheme } = useTheme();

// i18n
import { useTranslation } from "@/app/i18n/client";
import { useI18n } from "@/providers/i18n-provider";
```

## Server vs Client Components

### Server Components (default)
- Use for data fetching
- No need for "use client" directive
- Can import server-side utilities

### Client Components
- Require "use client" at top of file
- Use for interactivity (useState, useEffect, event handlers)
- Components using `useSearchParams()` need Suspense boundary

```tsx
"use client";

import { useSearchParams } from "next/navigation";
import { Suspense } from "react";
import { Loader } from "@/components/loader";

// Wrap in Suspense when using useSearchParams
<Suspense fallback={<Loader />}>
  <YourComponent />
</Suspense>
```

## Error Prevention

If you see this error:

```
Cannot find module 'mingster.backbone'
```

**You're trying to import from mingster.backbone - this is wrong!**

Fix it by using local imports:

```tsx
// ❌ Wrong
import { Button } from "mingster.backbone";

// ✅ Correct
import { Button } from "@/components/ui/button";
```

## Summary

- ✅ Use local imports from `@/components/`
- ✅ All UI components are in `src/components/ui/`
- ✅ Use shadcn/ui CLI to add new UI components
- ✅ Follow Next.js 15 App Router patterns
- ❌ Never import from `mingster.backbone`
- ❌ This project is self-contained with its own components
